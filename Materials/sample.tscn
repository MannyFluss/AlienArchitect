[gd_scene load_steps=8 format=3 uid="uid://4gy8w44vy0vs"]

[sub_resource type="Shader" id="Shader_s4nga"]
code = "shader_type spatial;

render_mode cull_front, unshaded, depth_draw_never;

global uniform vec4 outline_color;
global uniform float outline_width;

void vertex() {
	vec4 clip_position = 
			PROJECTION_MATRIX *
			(MODELVIEW_MATRIX * vec4(VERTEX, 1.0));
	vec3 clip_normal =
			mat3(PROJECTION_MATRIX) *
			(mat3(MODELVIEW_MATRIX) * NORMAL);
	clip_position.xy +=
			normalize(clip_normal.xy) /
			VIEWPORT_SIZE *
			clip_position.w *
			outline_width;
	POSITION = clip_position;
}

void fragment() {
	ALBEDO = outline_color.rgb;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r83wd"]
render_priority = 0
shader = SubResource("Shader_s4nga")

[sub_resource type="Shader" id="Shader_ytiqk"]
code = "shader_type spatial;

#define USE_ALPHA 0
#define USE_ALPHA_CUTOFF 0
#define USE_EMISSION 1
#define USE_REFLECTIONS 0
#define USE_NORMAL_MAP 1
#define USE_OCCLUSION 0
#define USE_ANISOTROPY 0
#define USE_BACKLIGHT 0
#define USE_REFRACTION 0

#if USE_ALPHA
render_mode depth_draw_always;
#endif

#include \"includes/base-cel-shader.gdshaderinc\"

#if USE_EMISSION
#include \"includes/emission.gdshaderinc\"
#endif

#if USE_REFLECTIONS
#include \"includes/reflections.gdshaderinc\"
#endif

#if USE_NORMAL_MAP
#include \"includes/normal-map.gdshaderinc\"
#endif

#if USE_OCCLUSION
#include \"includes/occlusion.gdshaderinc\"
#endif

#if USE_ANISOTROPY
#include \"includes/anisotropy.gdshaderinc\"
#endif

#if USE_BACKLIGHT
#include \"includes/backlight.gdshaderinc\"
#endif

#if USE_REFRACTION
#include \"includes/refraction.gdshaderinc\"
#elif !USE_REFRACTION && USE_ALPHA
#include \"includes/transparency.gdshaderinc\"
#endif

group_uniforms BaseProperties;
#if USE_ALPHA_CUTOFF
uniform float alpha_cutoff: hint_range(0.0, 1.0) = 0.5;
#endif
uniform vec4 color: source_color = vec4(0.7, 0.12, 0.86, 1.0);
uniform sampler2D base_texture: source_color;
uniform vec4 specular: source_color = vec4(0.3, 0.3, 0.3, 0.5);
uniform sampler2D specular_texture: hint_default_white;
uniform vec4 fresnel: source_color = vec4(0.2, 0.2, 0.2, 0.3);
uniform sampler2D fresnel_texture: hint_default_white;
group_uniforms;

varying vec3 SPECULAR_COLOR;
varying float SPECULAR_STRENGTH;
varying vec3 FRESNEL_COLOR;
varying float FRESNEL_STRENGTH;

group_uniforms Tiling;
uniform vec2 uv_scale = vec2(1,1);
uniform vec2 uv_offset = vec2(0,0);
group_uniforms;


void vertex() {
	UV = UV * uv_scale.xy + uv_offset.xy;
}

void fragment() {
	ALBEDO = color.rgb * texture(base_texture, UV).rgb;
#if USE_ALPHA
	float alpha = color.a * texture(base_texture, UV).a;
	ALBEDO *= alpha;
#elif USE_ALPHA_CUTOFF
	ALPHA = color.a * texture(base_texture, UV).a;
	ALPHA_SCISSOR_THRESHOLD = color.a * texture(base_texture, UV).a;
#endif
	
#if USE_REFRACTION && USE_ALPHA
	EMISSION += refraction_fragment(alpha, NORMAL, SCREEN_UV, FRAGCOORD.z);
#elif !USE_REFRACTION && USE_ALPHA
	EMISSION += transparency_fragment(alpha, SCREEN_UV);
#endif
	
	SPECULAR_COLOR = specular.rgb * texture(specular_texture, UV).rgb;
	SPECULAR_STRENGTH = specular.a * texture(specular_texture, UV).a;
	FRESNEL_COLOR = fresnel.rgb * texture(fresnel_texture, UV).rgb;
	FRESNEL_STRENGTH = fresnel.a * texture(fresnel_texture, UV).a;
	
#if USE_EMISSION
	EMISSION += emission_fragment(UV);
#endif
	
#if USE_REFLECTIONS
	Surface surf = reflections_fragment(UV);
	METALLIC = surf.metallic;
	ROUGHNESS = surf.roughness;
#endif
	
#if USE_NORMAL_MAP
	NormalData normal = normal_map_fragment(UV, NORMAL, TANGENT, BINORMAL);
	NORMAL = normal.vector;
	NORMAL_MAP = normal.map;
	NORMAL_MAP_DEPTH = normal.depth;
#endif
	
#if USE_OCCLUSION
	OcclusionData occlusion = occlusion_fragment(UV);
	AO = occlusion.ao;
	AO_LIGHT_AFFECT = occlusion.ao_light_affect;
#endif
	
#if USE_ANISOTROPY
	AnisotropyData aniso = anisotropy_fragment(UV);
	ANISOTROPY_DIR = aniso.direction;
	ANISOTROPY_RATIO = aniso.ratio;
#endif
	
#if USE_BACKLIGHT
	BACKLIGHT = backlight_fragment(UV);
#endif
}

void light() {
#if USE_BACKLIGHT
	DIFFUSE_LIGHT += backlight_diffuse(
			ALBEDO,
			LIGHT_COLOR,
			LIGHT,
			NORMAL,
			ATTENUATION,
			BACKLIGHT
	);
#else
	DIFFUSE_LIGHT += diffuse_light(
			ALBEDO,
			LIGHT_COLOR,
			LIGHT,
			NORMAL,
			ATTENUATION
	);
#endif
	
#if USE_ANISOTROPY
	SPECULAR_LIGHT += anisotropy_specular(
			LIGHT_COLOR,
			SPECULAR_COLOR,
			SPECULAR_STRENGTH,
			NORMAL,
			VIEW,
			LIGHT,
			ATTENUATION,
			UV,
			ANISOTROPY_DIR,
			ANISOTROPY_RATIO
	);
#else
	SPECULAR_LIGHT += specular_light(
			LIGHT_COLOR,
			SPECULAR_COLOR,
			SPECULAR_STRENGTH,
			NORMAL,
			VIEW,
			LIGHT,
			ATTENUATION
	);
#endif

	SPECULAR_LIGHT += fresnel_light(
			LIGHT_COLOR,
			FRESNEL_COLOR,
			FRESNEL_STRENGTH,
			NORMAL,
			VIEW,
			LIGHT,
			ATTENUATION
	);
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1a38o"]
frequency = 0.1107

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_t4t6w"]
noise = SubResource("FastNoiseLite_1a38o")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gniit"]
render_priority = 0
next_pass = SubResource("ShaderMaterial_r83wd")
shader = SubResource("Shader_ytiqk")
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 0.0
shader_parameter/normal_scale = 1.0
shader_parameter/normal_map = SubResource("NoiseTexture2D_t4t6w")
shader_parameter/color = Color(0.196078, 0.403922, 1, 1)
shader_parameter/specular = Color(0.3, 0.3, 0.3, 0.5)
shader_parameter/fresnel = Color(0.2, 0.2, 0.2, 0.3)
shader_parameter/uv_scale = Vector2(1, 1)
shader_parameter/uv_offset = Vector2(0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_nd2gv"]
material = SubResource("ShaderMaterial_gniit")

[node name="Sample" type="Node3D"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.976739, 0.462572, 0)
mesh = SubResource("BoxMesh_nd2gv")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(0.859335, 0, 0.511413, 0, 1, 0, -0.511413, 0, 0.859335, 1.70758, 1.82272, 1.95624)

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.61781, 0.509859, -0.598627, -0.758166, -0.184329, 0.625465, 0.208555, 0.840278, 0.500438, 0, 1.59302, 0)
